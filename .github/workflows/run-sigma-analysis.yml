name: Run Sigma-Analysis

on:
  workflow_dispatch:
    inputs:
      artifact_url:
        description: "URL API de l'artefact Dynamics à analyser (optionnel)"
        required: false
        default: ""

permissions:
  contents: read

concurrency:
  group: sigma-analysis
  cancel-in-progress: false

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas matplotlib requests

      - name: Compute OUT dir
        id: date
        run: echo "OUT=artifacts/$(date -u +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Determine artifacts URL (event or input)
        id: src
        run: |
          if [ -n "${{ github.event.inputs.artifact_url }}" ]; then
            echo "URL=${{ github.event.inputs.artifact_url }}" >> "$GITHUB_OUTPUT"
          else
            echo "URL=" >> "$GITHUB_OUTPUT"
          fi

      - name: If URL empty, find latest SUCCESS Dynamics artifact automatically
        if: steps.src.outputs.URL == ''
        id: auto
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          # Liste des artefacts (50 derniers)
          json=$(curl -sSfL -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/$owner/$repo/actions/artifacts?per_page=50")
          # Prend le plus récent non-expiré qui commence par 'sigma-dynamics-'
          url=$(echo "$json" | python - <<'PY'
import sys, json
j=json.load(sys.stdin)
arts=[a for a in j.get("artifacts",[]) if not a.get("expired") and a.get("name","").startswith("sigma-dynamics-")]
arts.sort(key=lambda a: a.get("created_at",""), reverse=True)
print(arts[0]["archive_download_url"] if arts else "")
PY
)
          if [ -z "$url" ]; then
            echo "::error::Aucun artefact 'sigma-dynamics-' valide trouvé. Lance d'abord le workflow Dynamics."
            exit 1
          fi
          echo "URL=$url" >> "$GITHUB_OUTPUT"

      - name: Download artifact zip
        id: dl
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          url="${{ steps.src.outputs.URL || steps.auto.outputs.URL }}"
          mkdir -p dl
          curl -sSfL -H "Authorization: Bearer $GH_TOKEN" -o dl/a.zip "$url"
          unzip -oq dl/a.zip -d dl/unzipped
          echo "ZIP_DIR=dl/unzipped" >> "$GITHUB_OUTPUT"

      - name: Locate sigma_dynamics.csv
        id: csv
        run: |
          mkdir -p "${{ steps.date.outputs.OUT }}"
          CSV=$(ls -1 "${{ steps.dl.outputs.ZIP_DIR }}"/**/sigma_dynamics.csv 2>/dev/null | head -n1 || true)
          if [ -z "$CSV" ]; then
            echo "::error::sigma_dynamics.csv introuvable. Assure-toi que le workflow Dynamics a bien uploadé 'sigma_dynamics.csv'."
            exit 1
          fi
          echo "CSV=$CSV" >> "$GITHUB_OUTPUT"

      - name: Run analysis
        env:
          MPLBACKEND: Agg
        run: |
          mkdir -p "${{ steps.date.outputs.OUT }}"
          python sigma_analysis.py \
            --csv "${{ steps.csv.outputs.CSV }}" \
            --out-dir "${{ steps.date.outputs.OUT }}"
          echo "Contenu OUT :"
          ls -lah "${{ steps.date.outputs.OUT }}"

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sigma-analysis-${{ github.run_id }}
          path: ${{ steps.date.outputs.OUT }}/
          if-no-files-found: error
          retention-days: 14
