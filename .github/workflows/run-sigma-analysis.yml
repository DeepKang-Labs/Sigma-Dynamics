name: Run Sigma-Analysis

on:
  # Auto when a Dynamics run completes
  workflow_run:
    workflows: ["Run Sigma-Dynamics (REAL)"]
    types: [completed]

  # Manual run (optional): you may leave artifact_url empty
  workflow_dispatch:
    inputs:
      artifact_url:
        description: "Artifacts API URL from a Dynamics run (optional)"
        required: false
        default: ""

permissions:
  contents: read
  actions: read

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas matplotlib requests
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Compute OUT dir
        id: date
        run: echo "OUT=artifacts/$(date -u +%F)" >> "$GITHUB_OUTPUT"

      - name: Determine artifacts URL (event or input)
        id: src
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "URL=${{ github.event.workflow_run.artifacts_url }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ github.event.inputs.artifact_url }}" ]; then
            echo "URL=${{ github.event.inputs.artifact_url }}" >> "$GITHUB_OUTPUT"
          else
            echo "URL=" >> "$GITHUB_OUTPUT"
          fi

      - name: If URL empty, find latest SUCCESS Dynamics run automatically
        if: steps.src.outputs.URL == ''
        id: auto
        env:
          REPO: ${{ github.repository }}
        run: |
          mkdir -p dl
          # Query latest successful runs of the Dynamics workflow file
          curl -sSL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/workflows/run-sigma-dynamics.yml/runs?status=success&per_page=1" \
            > dl/runs.json

          ART_URL=$(jq -r '.workflow_runs[0].artifacts_url // empty' dl/runs.json)
          if [ -z "$ART_URL" ]; then
            echo "::error::Aucun run Dynamics réussi trouvé. Lance d'abord 'Run Sigma-Dynamics (REAL)'."
            exit 1
          fi
          echo "URL=$ART_URL" >> "$GITHUB_OUTPUT"

      - name: Download artifact list (JSON)
        id: dlist
        env:
          URL: ${{ steps.src.outputs.URL || steps.auto.outputs.URL }}
        run: |
          mkdir -p dl
          curl -sSL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "$URL" > dl/list.json
          echo "Saved: dl/list.json"

      - name: Download & unzip the first non-expired artifact
        id: grab
        run: |
          ZIP_URL=$(jq -r '.artifacts[] | select(.expired==false) | .archive_download_url' dl/list.json | head -n1)
          if [ -z "$ZIP_URL" ] || [ "$ZIP_URL" = "null" ]; then
            echo "::error::Aucun artefact valide dans la liste."
            cat dl/list.json
            exit 1
          fi
          echo "Downloading $ZIP_URL"
          curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o dl/a.zip "$ZIP_URL"
          mkdir -p dl/unzipped
          unzip -oq dl/a.zip -d dl/unzipped

      - name: Locate sigma_dynamics.csv
        id: csv
        run: |
          mkdir -p "${{ steps.date.outputs.OUT }}"
          CSV=$(ls -1 dl/unzipped/**/sigma_dynamics.csv 2>/dev/null | head -n1 || true)
          # Fallbacks if needed
          [ -z "$CSV" ] && [ -f "outputs/sigma_dynamics.csv" ] && CSV="outputs/sigma_dynamics.csv"
          [ -z "$CSV" ] && [ -f "artifacts/sigma_dynamics.csv" ] && CSV="artifacts/sigma_dynamics.csv"

          if [ -z "$CSV" ]; then
            echo "::error::sigma_dynamics.csv introuvable. Assure-toi que le workflow Dynamics a bien uploadé 'outputs/'."
            exit 1
          fi
          echo "CSV_PATH=$CSV" >> "$GITHUB_OUTPUT"
          echo "Found: $CSV"

      - name: Run analysis
        run: |
          python sigma_analysis.py \
            --csv "${{ steps.csv.outputs.CSV_PATH }}" \
            --out-dir "${{ steps.date.outputs.OUT }}"

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sigma-analysis-${{ github.run_id }}
          path: ${{ steps.date.outputs.OUT }}
